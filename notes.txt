NOTES- 

-Ayush Jindal 2020


Public-static files. that we don't change, like images, or html file. etc. 
src- where we edit and add remove, write code/files. we might delete the default files created by create-react-app in this folder and create our own files. 
package.json- all the dependancies
packaage_lock.json- versions of all the dependancies

Every file is a universe in itself, so we will import whatever we need to reference or use, for eg. libraries like 'react' or other files. 

Babel turns versions of javascript into the ones compatible with most browsers. It also turns jsx into normal js. babeljs.io can show me that. 

differences between jsx and html- 
1. style={{backgroundColor:'red'}}
2. Class=classname to avoid contradiction with the JS class. 


Faker.js -using faker for fake images and info and stuff, so i don't need to worry about downloading and fabricating info. 
https://github.com/marak/Faker.js/


PROPS (properties)----- props is basically to customize the content between different childs of a parent component. to serve different content 
to childs. so we can use the same parent component, but still serve dynamic information to the childs. hence no need to 
copy paste the parent in order to fullfill the dynamic requirement. 
it's like the parent has certain spaces/ fill-in-the-blanks that have certain tags so that we can uniqely refer to these spaces, 
and when the parent is used as a child in a certain position, on a certain page, then props brings in the very custom and personal
 information to that specific child usage and then using the predefined ID's alocated to the spaces in the child, the props 
 can fill in the information. great job you props and childs. so props is like the bracket used in functions. we can pass info in that. 

 state can change, but prop can't change. this.setstate is possible, but this.setprops is not possible. props is immutable. 

 Redux takes like API information, and puts it into props. it's unchangable. 


 we write the actual properties (props) when we are calling the function (component), and we mention stuff through custom classnames.
  and when we then go to the actual called function (component) then we mention the props inside the first line bracket before =>, 
  and then we use the actual specific custom classname where we need to place the info. for eg, {props.customclassname}


COMPONENTS------
Components are function or Class that render html using jsx, and handle user feedback
Functional Components to be used for simple content, and Class Components to be used for everything else. 

in function components the function is delcared as ----  const App = () => {return (content);}             ------i call this component function
in class components, the class is declared as ---- class App extends React.Component{render(){return();}}  ------i call this component class
in class components, the functions inside are declared as ---- constructor(props) {} //basically like java ------i call this simple function (comes in class)




Benifits of Class Components over Functional Components- 
1. Easier code organising (helper funcitons can be cumbersome in function based components)
2. Can use 'state' system. easier to handle user input and update how our app looks based on input. 
3.  Lifecycle- easier to do things when our app first starts

STATE- (in class Components) - 
--Don't confuse props with state.
--State is a JS object that contains data relevant to a Components
--Updating state causes the Component to instantly Re-render
--State has to be Initialized when a Component is Created. 
--STATE CAN ONLY BE UPDATED USING FUNCTION 'setState' 



